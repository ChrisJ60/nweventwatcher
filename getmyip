#!/bin/zsh

#
# Copyright (c) Chris Jenkins 2019, 2020
#
# Licensed under the Universal Permissive License v 1.0 as shown
# at http://oss.oracle.com/licenses/upl
#

############################################################
# reset all shell options to default
emulate -LR zsh
# set required options
setopt nullglob
setopt shwordsplit
setopt ksharrays

############################################################
# reset PATH to system default
eval "$(/usr/libexec/path_helper)"

readonly ipurl2v4="https://ipv4.thejenkinsfamily.org.uk/utils/getmyip.php"
readonly ipurl2v6="https://ipv6.thejenkinsfamily.org.uk/utils/getmyip.php"
readonly ipurl3v4="http://v4.ipv6-test.com/api/myip.php"
readonly ipurl3v6="http://v6.ipv6-test.com/api/myip.php"
readonly interfacebase="en"
readonly interfacebaset="bridge"
readonly interfacebasev="vlan"
readonly -i mininterface=0
readonly -i maxinterface=20
readonly -i minutun=0
readonly -i maxutun=9
readonly -i minipsec=0
readonly -i maxipsec=9
readonly -i iftype_wifi=0
readonly -i iftype_wired=1
readonly -i iftype_tb=2
readonly -i iftype_vpn=3

declare -a ifname=( "" )
integer iftype
integer numif=0
integer ipv4=1
integer ipv6=1
integer singleAddr=1
integer tempAddrOnly=1
integer privAddrOnly=1
integer globAddrOnly=1
integer n
integer ret
integer tret

usage()
{
    echo 
    echo "Usage:"
    echo 
    echo "    getmyip {wired | wifi | tb | vpn} {-4 | -6 [-t] [{-p | -g}]} [-s]" 
    echo "    getmyip public {-4 | -6}" 
    echo 
    echo "Determine and display the system's IP adresses of the specified type."
    echo 
    echo "  wired   - Wired ethernet adapter addresses"
    echo "  wifi    - WiFi adapter addresses"
    echo "  tb      - Thunderbolt bridge adapter addresses"
    echo "  vpn     - VPN adapter addresses"
    echo "  public  - Public address"
    echo 
    echo "  -4      - IPv4 adresseses"
    echo 
    echo "  -6      - IPv6 adresseses"
    echo "    -t      Temporary addresses only (otherwise only permanent ones)"
    echo "    -p      Private addresses only (otherwise both types)"
    echo "    -g      Global addresses only (otherwise both types)"
    echo 
    echo "  -s      - If multiple addresses, only display the first one"
    echo 
    echo "Exit codes are:"
    echo "  0     -  at least one address was displayed"
    echo "  1     -  no addresses of the specified kind were detected"
    echo "  2     -  no connections of the specified type are active"
    echo "  100   -  syntax error, help information was displayed"
    echo "  other - some other error occurred"
    echo 
    exit 100
}

findVPNInterface()
{
    local -i i=0
    local v4addr=""
    local v6addr=""
    local ifname=""
    local -i ret=2

# First try PPTP/L2TP
    if ifconfig ppp0 >&/dev/null
    then
        ifname=ppp0
        ret=0
    else
# Try OpenConnect/AnyConnect VPN
        i=${minutun}
        while [[ ${i} -le ${maxutun} ]]
        do
            v4addr=$(getIPv4Address "utun${i}")
            v6addr=$(getIPv6Address "utun${i}")
            if [[ "${v4addr}" != "" ]] || [[ "${v6addr}" != "" ]]
            then
               ifname="utun${i}"
               ret=0
               i=${maxutun}+1
            fi
            i=${i}+1
        done
        if [[ ${ret} -ne 0 ]]
        then
# Try IKE/IPSEC
            i=${minipsec}
            while [[ ${i} -le ${maxipsec} ]]
            do
                v4addr=$(getIPv4Address "ipsec${i}")
                v6addr=$(getIPv6Address "ipsec${i}")
                if [[ "${v4addr}" != "" ]] || [[ "${v6addr}" != "" ]]
                then
                   ifname="ipsec${i}"
                   ret=0
                   i=${maxipsec}+1
                fi
                i=${i}+1
            done
        fi
    fi

    echo "${ifname}"
    return ${ret}
}

findInterfaces()
{
    local ifbase="${interfacebase}"
    local interfacename=""
    local tmp
    local -i iftype
    local -i interfacenumber=${mininterface}
    local -i ret=2

    if [[ $# -ne 1 ]]
    then
        return 2
    fi
    iftype=$1

    if [[ ${iftype} -eq ${iftype_vpn} ]]
    then
        if tmp=$(findVPNInterface)
        then
            ifname[0]="${tmp}"
            numif=1
            return 0
        else
            return 2
        fi
    fi
    if [[ ${iftype} -eq ${iftype_tb} ]]
    then
        ifbase="${interfacebaset}"
    fi

# first check physical interfaces
    while [[ ${interfacenumber} -le ${maxinterface} ]]
    do
        interfacename="${ifbase}${interfacenumber}"
        if [[ ${iftype} -eq ${iftype_wifi} ]]
        then
            if networksetup -getairportpower "${interfacename}" >&/dev/null
            then
                if ifconfig "${interfacename}" 2>/dev/null | grep -q "status: active"
                then
                    ifname[${numif}]="${interfacename}"
                    numif=${numif}+1
                    ret=0
                fi
            fi
        fi
        if [[ ${iftype} -eq ${iftype_wired} ]]
        then
            if ! networksetup -getairportpower "${interfacename}" >&/dev/null
            then
                if ifconfig "${interfacename}" 2>/dev/null | grep -q "status: active"
                then
                    ifname[${numif}]="${interfacename}"
                    numif=${numif}+1
                    ret=0
                fi
            fi
        fi
        if [[ ${iftype} -eq ${iftype_tb} ]]
        then
            if ! networksetup -getairportpower "${interfacename}" >&/dev/null
            then
                if ifconfig "${interfacename}" 2>/dev/null | grep -q "status: active"
                then
                    ifname[${numif}]="${interfacename}"
                    numif=${numif}+1
                    ret=0
                fi
            fi
        fi
        interfacenumber=${interfacenumber}+1
    done

# now check VLANs
    interfacenumber=${mininterface}
    while [[ ${interfacenumber} -le ${maxinterface} ]]
    do
        interfacename="${interfacebasev}${interfacenumber}"
        if ifconfig "${interfacename}" 2>/dev/null | grep -q "status: active"
        then
            ifname[${numif}]="${interfacename}"
            numif=${numif}+1
            ret=0
        fi
        interfacenumber=${interfacenumber}+1
    done

    return ${ret}
}

getPublicIP()
{
    local flag=""
    local ip=""
    local ipfile
    local ipurl2
    local ipurl3
    local -i tmp1
    local -i tmp2
    local -i ret=0

    if [[ $# -ne 1 ]]
    then
        usage
    fi
    case "$1" in
        -4)
            flag="4"
            ipurl2="${ipurl2v4}"
            ipurl3="${ipurl3v4}"
            ;;
        -6)
            flag="6"
            ipurl2="${ipurl2v6}"
            ipurl3="${ipurl3v6}"
            ;;
        *)
            usage
            ;;
    esac
    if ! ipfile=$(mktemp -q /tmp/ip.XXXXX)
    then
        ret=3
    else
        curl -s${flag} --connect-timeout 5 --max-time 10 "${ipurl2}" >"${ipfile}" 2>/dev/null
        tmp1=$?
        tmp2=$(wc -l "${ipfile}" | sed -e 's/^ *//' -e 's? /tmp.*??')
        if [[ ${tmp1} -ne 0 ]] || [[ ${tmp2} -gt 1 ]]
        then
            curl -s${flag} --connect-timeout 5 --max-time 10 "${ipurl3}" >"${ipfile}" 2>/dev/null
            tmp1=$?
            tmp2=$(wc -l "${ipfile}" | sed -e 's/^ *//' -e 's? /tmp.*??')
        fi
        if [[ ${tmp1} -eq 0 ]] && [[ ${tmp2} -le 1 ]]
        then
            ip=$(cat "${ipfile}")
            echo "${ip}"
        else
            ret=1
        fi
        rm -f "${ipfile}" >&/dev/null
    fi

    return ${ret}
}

getIPv4Address()
{
    local -i ret=1
    local addr=""

    if [[ "$1" != "" ]]
    then
        for addr in $(ifconfig "$1" 2>/dev/null | grep "inet " | sed -e 's/.*inet //' -e 's/ netmask.*$//' -e 's/ --> .*//')
        do
            if [[ "${addr}" != "" ]]
            then
                echo "${addr}"
                ret=0
                if [[ ${singleAddr} -eq 0 ]]
                then
                    return ${ret}
                fi
            fi
        done
    fi

    return ${ret}
}

getIPv6Address()
{
    local -i ret=1
    local addr=""
    local gflagt=""
    local gflaga=""
    local gpata="."

    if [[ ${tempAddrOnly} -eq 0 ]]
    then
        gflagt=""
    else
        gflagt="-v"
    fi
    if [[ ${privAddrOnly} -eq 0 ]]
    then
        gpata="^fd"
    elif [[ ${globAddrOnly} -eq 0 ]]
    then
        gpata="^fd"
        gflaga="-v"
    fi

    for addr in $(ifconfig "$1" 2>/dev/null | grep "inet6 " | grep -v " scopeid " | grep ${gflagt} "temporary" | sed -e 's/.*inet6 //' -e 's/ prefixlen.*$//' | grep ${gflaga} "${gpata}")
    do
        if [[ "${addr}" != "" ]]
        then
            echo "${addr}"
            ret=0
            if [[ ${singleAddr} -eq 0 ]]
            then
                return ${ret}
            fi
        fi
    done

    return ${ret}
}

parseArgs()
{
    while [[ $# -gt 0 ]]
    do
        case "$1" in
            -4)
                if [[ ${ipv4} -eq 0 ]] || [[ ${ipv6} -eq 0 ]]
                then
                    usage
                fi
                ipv4=0
                ;;

            -6)
                if [[ ${ipv4} -eq 0 ]] || [[ ${ipv6} -eq 0 ]]
                then
                    usage
                fi
                ipv6=0
                ;;
        
            -s)
               if [[ ${singleAddr} -eq 0 ]]
               then
                   usage
               fi
               singleAddr=0
               ;;

            -t)
               if [[ ${tempAddrOnly} -eq 0 ]]
               then
                   usage
               fi
               tempAddrOnly=0
               ;;
            -p)
               if [[ ${privAddrOnly} -eq 0 ]] || [[ ${globAddrOnly} -eq 0 ]]
               then
                   usage
               fi
               privAddrOnly=0
               ;;

            -g)
               if [[ ${privAddrOnly} -eq 0 ]] || [[ ${globAddrOnly} -eq 0 ]]
               then
                   usage
               fi
               globAddrOnly=0
               ;;

            *)
                usage
                ;;
        esac
        shift
    done

    if [[ ${ipv4} -eq 1 ]] && [[ ${ipv6} -eq 1 ]]
    then
        usage
    fi

    if [[ ( ${privAddrOnly} -eq 0 ) || \
          ( ${globAddrOnly} -eq 0 ) || \
          ( ${tempAddrOnly} -eq 0 ) ]] && \
       [[ ${ipv6} -eq 1 ]]
    then
        usage
    fi

    return 0
}

if [[ $# -lt 2 ]]
then
    usage
fi

case "$1" in

    -vpn|vpn)
        iftype=${iftype_vpn}
        ;;

    -tb|tb)
        iftype=${iftype_tb}
        ;;

    -wired|wired)
        iftype=${iftype_wired}
        ;;

    -wifi|wifi)
        iftype=${iftype_wifi}
        ;;

    -public|public)
        if [[ $# -gt 2 ]]
        then
            usage
        else
            getPublicIP "$2"
            exit $?
        fi
        ;;

    *)
        usage
        ;;

esac
shift

parseArgs "$@"

findInterfaces ${iftype}
ret=$?
if [[ ${ret} -ne 0 ]]
then
    exit ${ret}
fi

ret=1
n=0
while [[ ${n} -lt ${numif} ]]
do
    if [[ ${ipv4} -eq 0 ]]
    then
        getIPv4Address "${ifname[${n}]}"
        tret=$?
        if [[ ${tret} -eq 0 ]] && [[ ${singleAddr} -eq 0 ]]
        then
            n=${numif}
        fi
    else
        getIPv6Address "${ifname[${n}]}"
        tret=$?
        if [[ ${tret} -eq 0 ]] && [[ ${singleAddr} -eq 0 ]]
        then
            n=${numif}
        fi
    fi
    if [[ ${tret} -eq 0 ]]
    then
        ret=0
    fi
    n=${n}+1
done

exit ${ret}
